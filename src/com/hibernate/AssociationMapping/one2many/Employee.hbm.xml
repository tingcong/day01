<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.hibernate.AssociationMapping.one2many">
    <class name="Employee" table="t_employee">
        <id name="empId">
          <!--  1) assigned
            主键由外部程序负责生成，无需Hibernate参与。

            2) hilo
            通过hi/lo 算法实现的主键生成机制，需要额外的数据库表保存主
            键生成历史状态。

            3) seqhilo
            与hilo 类似，通过hi/lo 算法实现的主键生成机制，只是主键历史
            状态保存在Sequence中，适用于支持Sequence的数据库，如Oracle。

            4) increment
            主键按数值顺序递增。此方式的实现机制为在当前应用实例中维持
            一个变量，以保存着当前的最大值，之后每次需要生成主键的时候
            将此值加1作为主键。
            这种方式可能产生的问题是：如果当前有多个实例访问同一个数据
            库，那么由于各个实例各自维护主键状态，不同实例可能生成同样
            的主键，从而造成主键重复异常。因此，如果同一数据库有多个实
            例访问，此方式必须避免使用。

            5) identity
            采用数据库提供的主键生成机制。如DB2、SQL Server、MySQL
            中的主键生成机制。

            6) sequence
            采用数据库提供的sequence 机制生成主键。如Oralce 中的
            Sequence。

            7) native
            由Hibernate根据底层数据库自行判断采用identity、hilo、sequence
            其中一种作为主键生成方式。

            8) uuid.hex
            由Hibernate基于128 位唯一值产生算法生成16 进制数值（编码后
            以长度32 的字符串表示）作为主键。

            9) uuid.string
            与uuid.hex 类似，只是生成的主键未进行编码（长度16）。在某些
            数据库中可能出现问题（如PostgreSQL）。

            10) foreign
            使用外部表的字段作为主键。
            一般而言，利用uuid.hex方式生成主键将提供最好的性能和数据库平台适
            应性。-->
            <generator class="native"></generator>
        </id>
        <property name="empName" length="20"></property>
        <property name="salary" type="double"></property>

        <!--
            多对一映射配置
            Employee 映射关键点：
            1.  映射的部门属性  ：  dept
            2.  映射的部门属性，对应的外键字段: dept_id
            3.  部门的类型
         -->
        <many-to-one name="dept" column="dept_id" class="Dept"></many-to-one>
    </class>
</hibernate-mapping>